name: Main Branch CI/CD

on:
  push:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  NODE_OPTIONS: '--max_old_space_size=6144'
  AWS_REGION: us-east-1
  ECR_REPOSITORY: diagnyx/ui

permissions:
  id-token: write
  contents: read
  security-events: write

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: TypeScript type checking
      run: npm run type-check
    
    - name: Lint code
      run: npm run lint
    
    - name: Check code formatting
      run: npm run prettier:check
    
    - name: Run unit tests
      run: npm run test:ci
      env:
        NODE_ENV: test
    
    - name: Generate test coverage
      run: npm run test:coverage
      env:
        NODE_ENV: test
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        fail_ci_if_error: false
    
    - name: Build Next.js application
      run: npm run build
      env:
        NODE_ENV: production
        NEXT_TELEMETRY_DISABLED: 1
        # Add UAT environment variables
        NEXT_PUBLIC_API_URL: https://uat-api.diagnyx.com
        NEXT_PUBLIC_ENV: uat
    
    - name: Run npm audit
      run: npm audit --audit-level=moderate
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/DiagnyxGitHubActions-Staging
        role-session-name: GitHubActions-UI-Main
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=uat
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NODE_ENV=production
          NEXT_PUBLIC_API_URL=https://uat-api.diagnyx.com
          NEXT_PUBLIC_ENV=uat
    
    - name: Run security scan with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:uat'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    # Deploy to UAT (Disabled - uncomment when ready)
    # - name: Deploy to UAT ECS
    #   if: false  # Disabled for now
    #   run: |
    #     aws ecs update-service \
    #       --cluster diagnyx-uat \
    #       --service diagnyx-ui \
    #       --force-new-deployment \
    #       --region ${{ env.AWS_REGION }}
    
    # - name: Wait for deployment to complete
    #   if: false  # Disabled for now
    #   run: |
    #     aws ecs wait services-stable \
    #       --cluster diagnyx-uat \
    #       --services diagnyx-ui \
    #       --region ${{ env.AWS_REGION }}
    
    # - name: Run E2E tests against UAT
    #   if: false  # Disabled for now
    #   run: |
    #     # Run end-to-end tests against UAT environment
    #     npm run test:e2e:uat
    #   env:
    #     CYPRESS_BASE_URL: https://uat.diagnyx.com
    #     CYPRESS_API_URL: https://uat-api.diagnyx.com
    
    # - name: Run performance tests
    #   if: false  # Disabled for now
    #   run: |
    #     # Run Lighthouse CI against UAT
    #     npm install -g @lhci/cli@0.11.x
    #     lhci autorun --config=./.lighthouserc.json
    #   env:
    #     LHCI_BUILD_CONTEXT__CURRENT_HASH: ${{ github.sha }}
    #     LHCI_BUILD_CONTEXT__COMMIT_TIME: ${{ github.event.head_commit.timestamp }}
    #     CYPRESS_BASE_URL: https://uat.diagnyx.com